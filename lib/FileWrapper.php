<?php

namespace AWonderPHP\ResourceManager;

/**
 * Extends \AWonderPHP\FileWrapper\FileWrapper to allow tweaking the parameters
 * used when serving the requested file.
 */
class FileWrapper extends \AWonderPHP\FileWrapper\FileWrapper
{
    /**
     * The etag as generated by the class this extends contains values that depend upon the
     * file on the filesystem, I want consistent etag here regardless of the filesystem so
     * that load balancing does not result in different etag
     *
     * @return void
     */
    protected function fixEtag()
    {
        if (is_string($this->etag)) {
            $arr = explode('-', $this->etag);
            if (count($arr) === 4) {
                $string = "Make vimeo/psalm happy";
                if (! is_null($this->path)) {
                    $string = trim(basename($this->path));
                }
                $hash = hash('ripemd160', $string, false);
                $arr[0] = substr($hash, 4, 5);
                $arr[2] = $this->timestamp;
                $this->etag = sprintf("%s-%s-%x-%s", $arr[0], $arr[1], $arr[2], $arr[3]);
            }
        }
    }
  
    /**
     * Constructor function
     *
     * @param string      $filepath The path on the filesystem to the file being served
     * @param null|string $mime     The mime type to use
     * @param null|int    $ts       The unix timestamp to use when serving as mod date
     * @param null|string $origin   The allow-origin header to send
     * @param int         $maxage   How long the client should cache the file for, in seconds
     * @param bool        $minify   Whether or not the file should be minified on the fly
     *
     * @return void
     */
    public function __construct(string $filepath, $mime = null, $ts = null, $origin = null, int $maxage = 604800, bool $minify = false)
    {
        if ($minify) {
            $this->minify = true;
        }
        parent::__construct($filepath, null, $mime, $maxage, false);
        if (! is_null($ts)) {
            $this->timestamp = $ts;
            $this->lastmod = preg_replace('/\+0000$/', 'GMT', date('r', $this->timestamp));
        }
        if (! is_null($origin)) {
            $this->allowOrigin = $origin;
        }
        $this->fixEtag();
    }
}

?>